/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gestorbd;

import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author alumno
 */
public class JFrameClientes extends javax.swing.JFrame {
    static javax.swing.JFrame Principal;
    String Titulo;
    String op="";
    static ConectorSQL cn;
    
	/**
	 * Creates new form jFormularioDatos
	 */
	public JFrameClientes(javax.swing.JFrame padre) {
            JFrameClientes.Principal=padre;
            initComponents();
            
            this.setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
            fieldCodigo.grabFocus();
            deshabilitar();
            setTitle("Gestión de Almacén - Clientes");
            Titulo="Gestión de Almacén - Clientes";
        try {
            cn=new ConectorSQL();
        } catch (ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(this, "Error en el driver.\n", "Error", JOptionPane.ERROR_MESSAGE);
        }
            
        try {
            cn.conectBd();
            
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(rootPane, "ERROR AL CONECTAR.");
        }try {
            cn.crearTabla();
        } catch (SQLException ex) {
            
        }
        
    }

    

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        fieldCodigo = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        fieldNif = new javax.swing.JTextField();
        fieldLetraNif = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        fieldNombre = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        fieldApellido = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        fieldDomicilio = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        fieldCP = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        fieldLocalidad = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        fieldTlfn = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        fieldMovil = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        fieldFax = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        fieldMail = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        fieldtotal = new javax.swing.JTextField();
        btnAceptar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        salir = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        altas = new javax.swing.JMenuItem();
        bajas = new javax.swing.JMenuItem();
        Modif = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        Volver = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        PorCodigo = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        Inf1 = new javax.swing.JMenuItem();
        inf2 = new javax.swing.JMenuItem();
        inf3 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Entrada de Datos");
        setResizable(false);

        jLabel1.setText("Código");

        fieldCodigo.setColumns(6);
        fieldCodigo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                fieldCodigoFocusLost(evt);
            }
        });
        fieldCodigo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldCodigoActionPerformed(evt);
            }
        });
        fieldCodigo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                fieldCodigoKeyTyped(evt);
            }
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fieldCodigoKeyPressed(evt);
            }
        });

        jLabel2.setText("NIF");

        fieldNif.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                fieldNifCaretUpdate(evt);
            }
        });
        fieldNif.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldNifActionPerformed(evt);
            }
        });
        fieldNif.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                fieldNifKeyTyped(evt);
            }
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fieldNifKeyPressed(evt);
            }
        });

        fieldLetraNif.setEditable(false);
        fieldLetraNif.setFocusable(false);
        fieldLetraNif.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldLetraNifActionPerformed(evt);
            }
        });

        jLabel3.setText("Nombre");

        fieldNombre.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                fieldNombreKeyTyped(evt);
            }
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fieldNombreKeyPressed(evt);
            }
        });

        jLabel4.setText("Apellidos");

        fieldApellido.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                fieldApellidoKeyTyped(evt);
            }
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fieldApellidoKeyPressed(evt);
            }
        });

        jLabel5.setText("Domicilio");

        fieldDomicilio.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                fieldDomicilioKeyTyped(evt);
            }
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fieldDomicilioKeyPressed(evt);
            }
        });

        jLabel6.setText("C.P.");

        fieldCP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldCPActionPerformed(evt);
            }
        });
        fieldCP.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                fieldCPKeyTyped(evt);
            }
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fieldCPKeyPressed(evt);
            }
        });

        jLabel7.setText("Localidad");

        fieldLocalidad.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                fieldLocalidadKeyTyped(evt);
            }
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fieldLocalidadKeyPressed(evt);
            }
        });

        jLabel8.setText("Telefono");

        fieldTlfn.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                fieldTlfnKeyTyped(evt);
            }
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fieldTlfnKeyPressed(evt);
            }
        });

        jLabel9.setText("Móvil");

        fieldMovil.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                fieldMovilKeyTyped(evt);
            }
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fieldMovilKeyPressed(evt);
            }
        });

        jLabel10.setText("Fax");

        fieldFax.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                fieldFaxKeyTyped(evt);
            }
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fieldFaxKeyPressed(evt);
            }
        });

        jLabel11.setText("e-mail");

        fieldMail.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                fieldMailKeyTyped(evt);
            }
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fieldMailKeyPressed(evt);
            }
        });

        jLabel12.setText("Total");

        fieldtotal.setEditable(false);
        fieldtotal.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        fieldtotal.setText("0");
        fieldtotal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldtotalActionPerformed(evt);
            }
        });

        btnAceptar.setMnemonic('A');
        btnAceptar.setText("Aceptar");
        btnAceptar.setEnabled(false);
        btnAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAceptarActionPerformed(evt);
            }
        });

        btnCancelar.setMnemonic('C');
        btnCancelar.setText("Cancelar");
        btnCancelar.setEnabled(false);
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        salir.setMnemonic('s');
        salir.setText("Salir");
        salir.setEnabled(false);
        salir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salirActionPerformed(evt);
            }
        });

        jMenu1.setMnemonic('M');
        jMenu1.setText("Mantenimiento");
        jMenu1.setToolTipText("");

        altas.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        altas.setMnemonic('A');
        altas.setText("Altas");
        altas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                altasActionPerformed(evt);
            }
        });
        jMenu1.add(altas);

        bajas.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.CTRL_MASK));
        bajas.setMnemonic('B');
        bajas.setText("Bajas");
        bajas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bajasActionPerformed(evt);
            }
        });
        jMenu1.add(bajas);

        Modif.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.CTRL_MASK));
        Modif.setMnemonic('M');
        Modif.setText("Modificación");
        Modif.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ModifActionPerformed(evt);
            }
        });
        jMenu1.add(Modif);
        jMenu1.add(jSeparator1);

        Volver.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        Volver.setMnemonic('V');
        Volver.setText("Volver");
        Volver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VolverActionPerformed(evt);
            }
        });
        jMenu1.add(Volver);

        jMenuBar1.add(jMenu1);

        jMenu2.setMnemonic('C');
        jMenu2.setText("Consultas");
        jMenu2.setToolTipText("");

        PorCodigo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        PorCodigo.setMnemonic('P');
        PorCodigo.setText("Por Código");
        PorCodigo.setToolTipText("");
        PorCodigo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PorCodigoActionPerformed(evt);
            }
        });
        jMenu2.add(PorCodigo);

        jMenu3.setMnemonic('l');
        jMenu3.setText("Listado");
        jMenu3.setToolTipText("");

        Inf1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        Inf1.setMnemonic('C');
        Inf1.setText("Por Código");
        Inf1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Inf1ActionPerformed(evt);
            }
        });
        jMenu3.add(Inf1);

        inf2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        inf2.setMnemonic('e');
        inf2.setText("Entre Códigos");
        inf2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inf2ActionPerformed(evt);
            }
        });
        jMenu3.add(inf2);

        inf3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        inf3.setMnemonic('G');
        inf3.setText("Gráficos");
        inf3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inf3ActionPerformed(evt);
            }
        });
        jMenu3.add(inf3);

        jMenu2.add(jMenu3);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 91, Short.MAX_VALUE)
                                    .addComponent(fieldCodigo))
                                .addComponent(fieldApellido, javax.swing.GroupLayout.PREFERRED_SIZE, 403, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(fieldDomicilio))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(21, 21, 21)
                            .addComponent(jLabel1)
                            .addGap(62, 62, 62)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel2)
                                    .addGap(111, 111, 111)
                                    .addComponent(jLabel3))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(fieldNif, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(fieldLetraNif, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(fieldNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel11)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel12))
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, 64, Short.MAX_VALUE)
                                        .addComponent(fieldCP))
                                    .addGap(44, 44, 44)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(fieldLocalidad, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(fieldMail, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(fieldTlfn, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel8))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(fieldMovil, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel9))
                                        .addGap(12, 12, 12)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel10)
                                            .addComponent(fieldFax, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(60, 60, 60)
                                .addComponent(fieldtotal, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnAceptar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnCancelar)
                .addGap(18, 18, 18)
                .addComponent(salir)
                .addGap(25, 25, 25))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fieldCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fieldNif, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fieldLetraNif, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fieldNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(fieldApellido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fieldDomicilio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fieldCP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fieldLocalidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fieldTlfn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fieldMovil, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fieldFax, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fieldMail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fieldtotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAceptar)
                    .addComponent(btnCancelar)
                    .addComponent(salir))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

	
	/*
	*	Oh dear God why hast thou forsaken me. This code shall not be looked
	*	upon, for it shall burn those that dare gaze its form. There is nothing 
	*	done right about it. For love's sake, if this method block is ever 
	*	revised, burn it to the ground and implement a loop validation, or
	*	some other non idiotical approach.
	*/
    private void btnAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAceptarActionPerformed
		if(op.equals("altas")){
            try {
                comprobarTextFields_Altas();
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "ERROR");
            }
        }
        else
        {
            if(op.equals("modificar")){
                try {
                    comprobar2();
                } catch (Exception ex) {
                     JOptionPane.showMessageDialog(null, "ERROR");
                }
            }
            else
            {
                if(op.equals("bajas")){
                    try {
                        int num = JOptionPane.showConfirmDialog(rootPane,"¿Seguro que quieres borrar ese cliente?", "Borrar", JOptionPane.OK_CANCEL_OPTION);
                        switch(num)
                        {
                            case JOptionPane.OK_OPTION:
                                cn.borrarCliente(fieldCodigo.getText());
                                borrarTodo();
                                deshabilitar();
                                fieldCodigo.setEnabled(true);
                                fieldCodigo.grabFocus();
                                        
                                break;
                            case JOptionPane.CANCEL_OPTION://Si das a "cancelar" en la ventana anterior muestra este mensaje.

                                resetFields2();

                              

                                fieldCodigo.grabFocus();
                                break;
                            case JOptionPane.CLOSED_OPTION://Si cierras la ventana anterior muestra este mensaje.
                                resetFields2();
                                fieldCodigo.grabFocus();
                                break;
                            
                        }   } catch (SQLException ex) {
                        Logger.getLogger(JFrameClientes.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                else{
                    comprobarTextFields();
                }
            }
        }
    }//GEN-LAST:event_btnAceptarActionPerformed
	//Same as before. Just burn it.
	

//Form resetter
    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
		resetFields2();
		fieldCodigo.grabFocus();
    }//GEN-LAST:event_btnCancelarActionPerformed

//NIF letter generator on key stroke
    private void fieldNifCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_fieldNifCaretUpdate
                if (jFormController.validacion(jFormController.NIF, fieldNif.getText()) == jFormController.NO_ERROR) {
                    if (fieldNif.getText().length()==8) {
                        
			fieldLetraNif.setText(jFormController.letraNif(fieldNif.getText()));
                    }
		} else {
			fieldLetraNif.setText(null);
		}		
    }//GEN-LAST:event_fieldNifCaretUpdate
//Begin KeyEvent.VK_ENTER. On ENTER press, it shall focus the next field.
    private void fieldCodigoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fieldCodigoKeyPressed
		if(evt.getKeyCode()==10)
                     {
            
            try {
                rellenarCodigo();
                if(op.equals("altas")){
                    if(consultaCodigo()){
                        habilitar();
                        fieldNif.grabFocus();
                        fieldCodigo.setEnabled(false);
                    }
                    else{
                        JOptionPane.showMessageDialog(rootPane,"El código ya está dado de alta.", "ERROR.", JOptionPane.ERROR_MESSAGE);
                        fieldCodigo.setText("");
                        fieldCodigo.grabFocus();
                    }
                }
                else
                {
                    if(op.equals("bajas")){
                        try {
                            if(!consultaCodigo()){
                                String [] datos = cn.sacarDatos(fieldCodigo.getText());
                                    fieldNif.setText(datos[0]);
                                    fieldApellido.setText(datos[1]);
                                    fieldNombre.setText(datos[2]);
                                    fieldDomicilio.setText(datos[3]);
                                    fieldCP.setText(datos[4]);
                                    fieldLocalidad.setText(datos[5]);
                                    fieldTlfn.setText(datos[6]);
                                    fieldMovil.setText(datos[7]);
                                    fieldFax.setText(datos[8]);
                                    fieldMail.setText(datos[9]);
                                    fieldCodigo.setEnabled(false);
                                    btnAceptar.setEnabled(true);
                                    btnAceptar.grabFocus();
                                   btnCancelar.setEnabled(true);
                                   salir.setEnabled(true);
                            }
                            else
                            {
                                JOptionPane.showMessageDialog(null, "El código no está dado de alta.", "ERROR.", JOptionPane.ERROR_MESSAGE);
                                fieldCodigo.setText("");
                            }
                        } catch (SQLException ex) {
                            Logger.getLogger(JFrameClientes.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                    else{
                        if(op.equals("modificar")){
                            try {
                                if(consultaCodigo()){
                                    JOptionPane.showMessageDialog(null, "El código no está dado de alta.", "ERROR.", JOptionPane.ERROR_MESSAGE);
                                    fieldCodigo.setText("");
                                }
                                else{
                                    String [] datos = cn.sacarDatos(fieldCodigo.getText());
                                    fieldNif.setText(datos[0]);
                                    fieldApellido.setText(datos[1]);
                                    fieldNombre.setText(datos[2]);
                                    fieldDomicilio.setText(datos[3]);
                                    fieldCP.setText(datos[4]);
                                    fieldLocalidad.setText(datos[5]);
                                    fieldTlfn.setText(datos[6]);
                                    fieldMovil.setText(datos[7]);
                                    fieldFax.setText(datos[8]);
                                    fieldMail.setText(datos[9]);
                                    habilitar();
                                    fieldNif.grabFocus();
                                    fieldCodigo.setEnabled(false);
                                    
                                }
                                
                            } catch (SQLException ex) {
                                JOptionPane.showMessageDialog(null, "ERROR DE BASE DE DATOS.", "ERROR.", JOptionPane.ERROR_MESSAGE);
                            }
                        }else if (op.equals("mod")){
                            try {
                                if(consultaCodigo()){
                                    JOptionPane.showMessageDialog(null, "El código no está dado de alta.", "ERROR.", JOptionPane.ERROR_MESSAGE);
                                    fieldCodigo.setText("");
                                }
                                else{
                                    String [] datos = cn.sacarDatos(fieldCodigo.getText());
                                    fieldNif.setText(datos[0]);
                                    fieldApellido.setText(datos[1]);
                                    fieldNombre.setText(datos[2]);
                                    fieldDomicilio.setText(datos[3]);
                                    fieldCP.setText(datos[4]);
                                    fieldLocalidad.setText(datos[5]);
                                    fieldTlfn.setText(datos[6]);
                                    fieldMovil.setText(datos[7]);
                                    fieldFax.setText(datos[8]);
                                    fieldMail.setText(datos[9]);
                                    //habilitar();
                                    btnCancelar.setEnabled(true);
                                    btnCancelar.grabFocus();
                                    fieldCodigo.setEnabled(false);
                                    
                                }
                                
                            } catch (SQLException ex) {
                                JOptionPane.showMessageDialog(null, "ERROR DE BASE DE DATOS.", "ERROR.", JOptionPane.ERROR_MESSAGE);
                            }
                        }
                    }
                }
            } catch (Exception ex) {
                fieldCodigo.setText("");
            }
        }
    }//GEN-LAST:event_fieldCodigoKeyPressed

    private void fieldNifKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fieldNifKeyPressed
		if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
			fieldNombre.grabFocus();
		}
    }//GEN-LAST:event_fieldNifKeyPressed

    private void fieldNombreKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fieldNombreKeyPressed
		if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
			fieldApellido.grabFocus();
		}
    }//GEN-LAST:event_fieldNombreKeyPressed

    private void fieldApellidoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fieldApellidoKeyPressed
		if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
			fieldDomicilio.grabFocus();
		}
    }//GEN-LAST:event_fieldApellidoKeyPressed

    private void fieldDomicilioKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fieldDomicilioKeyPressed
		if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
			fieldCP.grabFocus();
		}
    }//GEN-LAST:event_fieldDomicilioKeyPressed

    private void fieldCPKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fieldCPKeyPressed
		if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
			fieldLocalidad.grabFocus();
		}
    }//GEN-LAST:event_fieldCPKeyPressed

    private void fieldLocalidadKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fieldLocalidadKeyPressed
		if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
			fieldTlfn.grabFocus();
		}
    }//GEN-LAST:event_fieldLocalidadKeyPressed

    private void fieldTlfnKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fieldTlfnKeyPressed
		if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
			fieldMovil.grabFocus();
		}
    }//GEN-LAST:event_fieldTlfnKeyPressed

    private void fieldMovilKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fieldMovilKeyPressed
		if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
			fieldFax.grabFocus();
		}
    }//GEN-LAST:event_fieldMovilKeyPressed

    private void fieldFaxKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fieldFaxKeyPressed
		if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
			fieldMail.grabFocus();
		}
    }//GEN-LAST:event_fieldFaxKeyPressed

    private void fieldMailKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fieldMailKeyPressed
		if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
			btnAceptar.grabFocus();
		}
    }//GEN-LAST:event_fieldMailKeyPressed
//End block
	
	
    private void fieldCodigoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_fieldCodigoFocusLost
		//on loss of focus for field Codigo add 0's on the left
		String show = "";
		for (int i = 0; i < 6 - fieldCodigo.getText().length(); i++) {
			show += "0";
		}
		show += fieldCodigo.getText();
		fieldCodigo.setText(show);
    }//GEN-LAST:event_fieldCodigoFocusLost

    private void fieldCPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fieldCPActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fieldCPActionPerformed

    private void fieldCodigoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fieldCodigoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fieldCodigoActionPerformed

    private void fieldCodigoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fieldCodigoKeyTyped
        int maximo=6;
        if (fieldCodigo.getText().length()>=maximo) {
            evt.consume();
        }
    }//GEN-LAST:event_fieldCodigoKeyTyped

    private void fieldtotalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fieldtotalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fieldtotalActionPerformed

    private void bajasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bajasActionPerformed
       fieldCodigo.setEnabled(true);
        deshabilitar3();
        borrarTodo();
        op="bajas";
        fieldCodigo.setText("");
        fieldCodigo.grabFocus(); 
        setTitle(Titulo+" - Bajas");
        jMenu1.setEnabled(false);
     jMenu2.setEnabled(false);
     jMenu3.setEnabled(false);
     jMenuBar1.setEnabled(false);
     salir.setEnabled(true);
    }//GEN-LAST:event_bajasActionPerformed

    private void altasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_altasActionPerformed
        fieldCodigo.setEnabled(true);
         
        op="altas"; 
        fieldCodigo.setText("");
        deshabilitar3();
        borrarTodo();
        fieldCodigo.grabFocus();   
        setTitle(Titulo+" - Altas");// TODO add your handling code here:
        jMenu1.setEnabled(false);
     jMenu2.setEnabled(false);
     jMenu3.setEnabled(false);
     jMenuBar1.setEnabled(false);
     salir.setEnabled(true);
    }//GEN-LAST:event_altasActionPerformed

    private void VolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VolverActionPerformed
        Principal.setEnabled(true);
        this.setVisible(false);
    }//GEN-LAST:event_VolverActionPerformed

    private void fieldLetraNifActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fieldLetraNifActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fieldLetraNifActionPerformed

    private void fieldNifActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fieldNifActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fieldNifActionPerformed

    private void ModifActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ModifActionPerformed
        fieldCodigo.setEnabled(true);
         fieldCodigo.setText("");
            op="modificar";
            deshabilitar3();
             borrarTodo();
        fieldCodigo.grabFocus();
         setTitle(Titulo+" - Modificación");
         jMenu1.setEnabled(false);
     jMenu2.setEnabled(false);
     jMenu3.setEnabled(false);
     jMenuBar1.setEnabled(false);
     salir.setEnabled(true);
    }//GEN-LAST:event_ModifActionPerformed

    private void PorCodigoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PorCodigoActionPerformed
     fieldCodigo.setEnabled(true);
         fieldCodigo.setText("");
            op="mod";
            deshabilitar3();
             borrarTodo();
        fieldCodigo.grabFocus();
         setTitle(Titulo+" - Por Código");
         
       jMenu1.setEnabled(false);
     jMenu2.setEnabled(false);
     jMenu3.setEnabled(false);
     jMenuBar1.setEnabled(false);
         salir.setEnabled(true);
        
    }//GEN-LAST:event_PorCodigoActionPerformed

    private void inf3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inf3ActionPerformed
Grafico g = new Grafico();
        g.ejecutarInforme();  
        // TODO add your handling code here:
    }//GEN-LAST:event_inf3ActionPerformed

    private void inf2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inf2ActionPerformed
        VentanaEntreCodigos e = new VentanaEntreCodigos();
        e.show();
    }//GEN-LAST:event_inf2ActionPerformed

    private void Inf1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Inf1ActionPerformed
 GestorBD g = new GestorBD();
        g.ejecutarInforme();   
        

// TODO add your handling code here:
    }//GEN-LAST:event_Inf1ActionPerformed

    private void salirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salirActionPerformed
     resetFields();
     setTitle("Gestión de Almacén - Clientes");
     jMenu1.setEnabled(true);
     jMenu2.setEnabled(true);
     jMenu3.setEnabled(true);
     jMenuBar1.setEnabled(true);
     salir.setEnabled(false);
    }//GEN-LAST:event_salirActionPerformed

    private void fieldNifKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fieldNifKeyTyped
        int maximo=8;
        if (fieldNif.getText().length()>=maximo) {
            evt.consume();
        }
    }//GEN-LAST:event_fieldNifKeyTyped

    private void fieldNombreKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fieldNombreKeyTyped
      int maximo=15;
        if (fieldNombre.getText().length()>=maximo) {
            evt.consume();
        }
    }//GEN-LAST:event_fieldNombreKeyTyped

    private void fieldApellidoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fieldApellidoKeyTyped
    int maximo=35;
        if (fieldApellido.getText().length()>=maximo) {
            evt.consume();
        }        
    }//GEN-LAST:event_fieldApellidoKeyTyped

    private void fieldDomicilioKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fieldDomicilioKeyTyped
        int maximo=15;
        if (fieldDomicilio.getText().length()>=maximo) {
            evt.consume();
        }
    }//GEN-LAST:event_fieldDomicilioKeyTyped

    private void fieldCPKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fieldCPKeyTyped
    int maximo=5;
        if (fieldCP.getText().length()>=maximo) {
            evt.consume();
        }        // TODO add your handling code here:
    }//GEN-LAST:event_fieldCPKeyTyped

    private void fieldLocalidadKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fieldLocalidadKeyTyped
      int maximo=20;
        if (fieldLocalidad.getText().length()>=maximo) {
            evt.consume();
        }
    }//GEN-LAST:event_fieldLocalidadKeyTyped

    private void fieldTlfnKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fieldTlfnKeyTyped
        int maximo=9;
        if (fieldTlfn.getText().length()>=maximo) {
            evt.consume();
        }
    }//GEN-LAST:event_fieldTlfnKeyTyped

    private void fieldMovilKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fieldMovilKeyTyped
        int maximo=15;
        if (fieldMovil.getText().length()>=maximo) {
            evt.consume();
        }
        
    }//GEN-LAST:event_fieldMovilKeyTyped

    private void fieldFaxKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fieldFaxKeyTyped
         int maximo=15;
        if (fieldFax.getText().length()>=maximo) {
            evt.consume();
        }
    }//GEN-LAST:event_fieldFaxKeyTyped

    private void fieldMailKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fieldMailKeyTyped
 int maximo=20;
        if (fieldMail.getText().length()>=maximo) {
            evt.consume();
        }        // TODO add your handling code here:
    }//GEN-LAST:event_fieldMailKeyTyped

	private void resetFields() { //resets all text fields
		fieldApellido.setText(null);
		fieldCP.setText(null);
		fieldCodigo.setText(null);
		fieldDomicilio.setText(null);
		fieldFax.setText(null);
		fieldLetraNif.setText(null);
		fieldLocalidad.setText(null);
		fieldMail.setText(null);
		fieldMovil.setText(null);
		fieldNif.setText(null);
		fieldTlfn.setText(null);
		fieldNombre.setText(null);
                fieldApellido.setEnabled(false);
		fieldCP.setEnabled(false);
		fieldCodigo.setEnabled(false);
		fieldDomicilio.setEnabled(false);
		fieldFax.setEnabled(false);
		fieldLetraNif.setEnabled(false);
		fieldLocalidad.setEnabled(false);
		fieldMail.setEnabled(false);
		fieldMovil.setEnabled(false);
		fieldNif.setEnabled(false);
		fieldTlfn.setEnabled(false);
		fieldNombre.setEnabled(false);
                fieldtotal.setEnabled(false);
                btnAceptar.setEnabled(false);
                btnCancelar.setEnabled(false);
                jMenuBar1.grabFocus();
                //salir.setEnabled(false);
	}

	private void warningPane(String title, String content) {
		JOptionPane.showMessageDialog(this, content, title, JOptionPane.YES_NO_CANCEL_OPTION);
	}

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
		 * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Darcula".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(JFrameClientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(JFrameClientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(JFrameClientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(JFrameClientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		try {
			javax.swing.UIManager.setLookAndFeel("com.bulenkov.darcula.DarculaLaf");
		} catch (Exception ex) {
			ex.printStackTrace();
		}
		//</editor-fold>

		/* Create and display the form */
		try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFrameClientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFrameClientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFrameClientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFrameClientes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFrameClientes(Principal).setVisible(true);
            }
		});
        }
 protected void processWindowEvent(java.awt.event.WindowEvent e) {
        super.processWindowEvent(e);
        if (e.getID() == java.awt.event.WindowEvent.WINDOW_CLOSING) {
            Principal.setEnabled(true);
            Principal.setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        }
     }
	//control variable
	
    //"WARNING: \"\"" <- Basic Warning prompt

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem Inf1;
    private javax.swing.JMenuItem Modif;
    private javax.swing.JMenuItem PorCodigo;
    private javax.swing.JMenuItem Volver;
    private javax.swing.JMenuItem altas;
    private javax.swing.JMenuItem bajas;
    private javax.swing.JButton btnAceptar;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JTextField fieldApellido;
    private javax.swing.JTextField fieldCP;
    private javax.swing.JTextField fieldCodigo;
    private javax.swing.JTextField fieldDomicilio;
    private javax.swing.JTextField fieldFax;
    private javax.swing.JTextField fieldLetraNif;
    private javax.swing.JTextField fieldLocalidad;
    private javax.swing.JTextField fieldMail;
    private javax.swing.JTextField fieldMovil;
    private javax.swing.JTextField fieldNif;
    private javax.swing.JTextField fieldNombre;
    private javax.swing.JTextField fieldTlfn;
    private javax.swing.JTextField fieldtotal;
    private javax.swing.JMenuItem inf2;
    private javax.swing.JMenuItem inf3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JButton salir;
    // End of variables declaration//GEN-END:variables

    private void borrarTodo() {
        fieldApellido.setText("");
        fieldCP.setText("");
        fieldCodigo.setText("");
        fieldDomicilio.setText("");
        fieldMail.setText("");
        fieldFax.setText("");
        fieldLetraNif.setText("");
        fieldLocalidad.setText("");
        fieldMovil.setText("");
        fieldNif.setText("");
        fieldNombre.setText("");
        fieldTlfn.setText("");
        fieldtotal.setText("0");    }

    private void deshabilitar() {
       fieldApellido.setEnabled(false);
        fieldCP.setEnabled(false);
        fieldCodigo.setEnabled(false);
        fieldDomicilio.setEnabled(false);
        fieldMail.setEnabled(false);
        fieldFax.setEnabled(false);
       fieldLetraNif.setEnabled(false);
       
        fieldLocalidad.setEnabled(false);
        fieldMovil.setEnabled(false);
        fieldNif.setEnabled(false);
        fieldNombre.setEnabled(false);
        fieldTlfn.setEnabled(false);
        fieldtotal.setEnabled(false);
        btnAceptar.setEnabled(false); 
        
    }
    private void deshabilitar3() {
       fieldApellido.setEnabled(false);
        fieldCP.setEnabled(false);
        fieldDomicilio.setEnabled(false);
        fieldMail.setEnabled(false);
        fieldFax.setEnabled(false);
       fieldLetraNif.setEnabled(false);
        fieldLocalidad.setEnabled(false);
        fieldMovil.setEnabled(false);
        fieldNif.setEnabled(false);
        fieldNombre.setEnabled(false);
        fieldTlfn.setEnabled(false);
        fieldtotal.setEnabled(false);
        btnAceptar.setEnabled(false);    
        btnCancelar.setEnabled(false);
        //salir.setEnabled(false);
    }
  
    private void comprobarTextFields_Altas() {
    if(fieldCodigo.getText().matches("[a-zA-Z0-9]{1,6}"))
        {
            if(fieldNif.getText().matches("[0-9]{8}"))
            {
                rellenarLetra();
                if(fieldNombre.getText().matches("[a-zA-Z\\s]{1,15}"))
                {
                    if(fieldApellido.getText().matches("[a-zA-Z\\s.-]{1,35}"))
                    {
                        if(fieldDomicilio.getText().matches("[a-zA-Z0-9\\s\\W]{1,40}"))
                        {
                            if(fieldCP.getText().matches("[0-9]{5}")) 
                            {
                                if(fieldLocalidad.getText().matches("[a-zA-Z\\s.-]{1,20}"))
                                {
                                    if(fieldTlfn.getText().matches("[0-9]{9}") || fieldTlfn.getText().equals(""))
                                    {
                                        if(fieldMovil.getText().matches("[0-9]{9}") || fieldMovil.getText().equals(""))
                                        {
                                            if(fieldFax.getText().matches("[0-9]{9}") || fieldFax.getText().equals(""))
                                            {
                                                if(fieldMail.getText().matches("[a-zA-z0-9@_.-]{1,20}") || fieldMail.getText().equals(""))
                                                {
                                                    JOptionPane.showMessageDialog(rootPane, "El formulario ha sido rellenado correctamente.","Formulario correcto.", WIDTH);
                                                    try {
                                                        cn.insertarVenta(fieldCodigo.getText(), fieldNif.getText(),fieldApellido.getText(), fieldNombre.getText(), fieldDomicilio.getText(),fieldCP.getText(), fieldLocalidad.getText(), fieldTlfn.getText(), fieldMovil.getText(), fieldFax.getText(),fieldMail.getText(), fieldtotal.getText());
                                                    } catch (SQLException ex) {
                                                        Logger.getLogger(JFrameClientes.class.getName()).log(Level.SEVERE, null, ex);
                                                    }
                                                    borrarTodo();
                                                    deshabilitar2();
                                                    fieldCodigo.setEnabled(true);
                                                    fieldCodigo.grabFocus();                                                }
                                                else
                                                {
                                                    JOptionPane.showMessageDialog(rootPane, "El email no puede contener acentos ni 'ñ' ni '/' \n y no puede superar los 20 caracteres","Error en el email", WIDTH);
                                                    fieldMail.grabFocus();
                                                }
                                                
                                            }
                                            else
                                            {
                                                JOptionPane.showMessageDialog(rootPane, "El fax debe contener 9 dígitos numéricos","Error en el fax", WIDTH);
                                                fieldFax.grabFocus();
                                            }
                                        }
                                        else
                                        {
                                            JOptionPane.showMessageDialog(rootPane, "El móvil debe contener 9 dígitos numéricos","Error en el móvil", WIDTH);
                                            fieldMovil.grabFocus();
                                        }
                                    }
                                    else
                                    {
                                        JOptionPane.showMessageDialog(rootPane, "El teléfono debe contener 9 dígitos numéricos","Error en el teléfono", WIDTH);
                                        fieldTlfn.grabFocus();
                                    }
                                }
                                else
                                {
                                    JOptionPane.showMessageDialog(rootPane, "La localidad no puede contener números ni '_' \n y no puede superar los 20 caracteres","Error en la localidad", WIDTH);
                                    fieldLocalidad.grabFocus();
                                }
                            }
                            else
                            {
                                JOptionPane.showMessageDialog(rootPane, "El Código postal debe contener 5 números","Error en el código postal", WIDTH);
                                fieldCP.grabFocus();
                            }
                        }
                        else
                        {
                            JOptionPane.showMessageDialog(rootPane, "El domicilio no puede contener @ ni _ \n y no puede superar los 40 caracteres","Error en el domicilio", WIDTH);
                            fieldDomicilio.grabFocus(); 
                        }
                    }
                    else
                    {
                        JOptionPane.showMessageDialog(rootPane, "El apellido no puede contener números\n y no puede superar los 35 caracteres","Error en el apellido", WIDTH);
                        fieldApellido.grabFocus(); 
                    }
                }
                else
                {
                    JOptionPane.showMessageDialog(rootPane, "El nombre no puede contener números ni carácteres extraños \n y no puede superar los 15 caracteres","Error en el Nombre", WIDTH);
                    fieldNombre.grabFocus(); 
                }
            }
            else
            {
                JOptionPane.showMessageDialog(rootPane, "El NIF tiene que llevar 8 dígitos","Error en el NIF", WIDTH);
                fieldNif.grabFocus(); 
            }
        }
        else
        {
            JOptionPane.showMessageDialog(rootPane, "El código solo puede contener letras o números","Error en el código", WIDTH);
            fieldCodigo.grabFocus(); 
        }   
    }

    private void rellenarLetra() {
        char letra =' ';
        int dni=Integer.valueOf(fieldNif.getText());
        String juegoCaracteres="TRWAGMYFPDXBNJZSQVHLCKE";
        int modulo= dni%23;
        if (fieldNif.getText().length()==8) {
             letra = juegoCaracteres.charAt(modulo);
        }
       
        fieldLetraNif.setText(String.valueOf(letra));  }
   private void deshabilitar4() {
       
       fieldApellido.setEnabled(true);
        fieldCP.setEnabled(true);
        fieldCodigo.setEnabled(true);
        fieldDomicilio.setEnabled(true);
        fieldMail.setEnabled(true);
        fieldFax.setEnabled(true);
       fieldLetraNif.setEnabled(true);
        fieldLocalidad.setEnabled(true);
        fieldMovil.setEnabled(true);
        fieldNif.setEnabled(true);
        fieldNombre.setEnabled(true);
        fieldTlfn.setEnabled(true);
        fieldtotal.setEnabled(true);
        fieldNombre.grabFocus();    }

    private void deshabilitar2() {
       
       fieldApellido.setEnabled(false);
        fieldCP.setEnabled(false);
        fieldCodigo.setEnabled(false);
        fieldDomicilio.setEnabled(false);
        fieldMail.setEnabled(false);
        fieldFax.setEnabled(false);
       fieldLetraNif.setEnabled(false);
        fieldLocalidad.setEnabled(false);
        fieldMovil.setEnabled(false);
        fieldNif.setEnabled(false);
        fieldNombre.setEnabled(false);
        fieldTlfn.setEnabled(false);
        fieldtotal.setEnabled(false);
        fieldNombre.grabFocus();
        btnAceptar.setEnabled(false);
        btnCancelar.setEnabled(false);
    }

    private void comprobar2() throws Exception{
         if(fieldCodigo.getText().matches("[a-zA-Z0-9]{1,6}"))
        {
            if(fieldNif.getText().matches("[0-9]{8}"))
            {
                 rellenarLetra();
                if(fieldNombre.getText().matches("[a-zA-Z\\s]{1,15}"))
                {
                    if(fieldApellido.getText().matches("[a-zA-Z\\s.-]{1,35}"))
                    {
                        if(fieldDomicilio.getText().matches("[a-zA-Z0-9\\s\\W]{1,40}"))
                        {
                            if(fieldCP.getText().matches("[0-9]{5}")) 
                            {
                                if(fieldLocalidad.getText().matches("[a-zA-Z\\s.-]{1,20}"))
                                {
                                    if(fieldTlfn.getText().matches("[0-9]{9}")|| fieldTlfn.getText().equals(""))
                                    {
                                        if(fieldMovil.getText().matches("[0-9]{9}")|| fieldMovil.getText().equals(""))
                                        {
                                            if(fieldFax.getText().matches("[0-9]{9}")|| fieldFax.getText().equals(""))
                                            {
                                                if(fieldMail.getText().matches("[a-zA-z0-9@_.-]{1,20}")|| fieldMail.getText().equals(""))
                                                {
                                                    JOptionPane.showMessageDialog(rootPane, "El formulario ha sido rellenado correctamente.","Formulario Correcto", WIDTH);
                                                    try {
                                                        cn.modCliente(fieldCodigo.getText(),fieldNif.getText(),fieldApellido.getText(),fieldNombre.getText(),fieldDomicilio.getText(),fieldCP.getText(),fieldLocalidad.getText() ,fieldTlfn.getText(),fieldMovil.getText(), fieldFax.getText(), fieldMail.getText(),fieldtotal.getText());
                                                    } catch (SQLException ex) {
                                                         JOptionPane.showMessageDialog(null, "ERROR en la modificación.", "ERROR.", JOptionPane.ERROR_MESSAGE);
                                              
                                                    }
                                                    
                                                    
                                                    borrarTodo();
                                                    deshabilitar2();
                                                    fieldCodigo.setEnabled(true);
                                                    fieldCodigo.grabFocus();
                                                }
                                                else
                                                {
                                                    JOptionPane.showMessageDialog(rootPane, "El email no puede contener acentos ni 'ñ' ni '/' \n y no puede superar los 20 caracteres","Error en el email", WIDTH);
                                                    fieldMail.grabFocus();
                                                }
                                                
                                            }
                                            else
                                            {
                                                JOptionPane.showMessageDialog(rootPane, "El fax debe contener 9 dígitos numéricos","Error en el fax", WIDTH);
                                                fieldFax.grabFocus();
                                            }
                                        }
                                        else
                                        {
                                            JOptionPane.showMessageDialog(rootPane, "El móvil debe contener 9 dígitos numéricos","Error en el móvil", WIDTH);
                                            fieldMovil.grabFocus();
                                        }
                                    }
                                    else
                                    {
                                        JOptionPane.showMessageDialog(rootPane, "El teléfono debe contener 9 dígitos numéricos","Error en el teléfono", WIDTH);
                                        fieldTlfn.grabFocus();
                                    }
                                }
                                else
                                {
                                    JOptionPane.showMessageDialog(rootPane, "La localidad no puede contener números ni '_' \n y no puede superar los 20 caracteres","Error en la localidad", WIDTH);
                                    fieldLocalidad.grabFocus();
                                }
                            }
                            else
                            {
                                JOptionPane.showMessageDialog(rootPane, "El Código postal debe contener 5 números","Error en el Código postal", WIDTH);
                                fieldCP.grabFocus();
                            }
                        }
                        else
                        {
                            JOptionPane.showMessageDialog(rootPane, "El domicilio no puede contener @ ni _ \n y no puede superar los 40 caracteres","Error en el domicilio", WIDTH);
                            fieldDomicilio.grabFocus(); 
                        }
                    }
                    else
                    {
                        JOptionPane.showMessageDialog(rootPane, "El apellido no puede contener números\n y no puede superar los 35 caracteres","Error en el apellido", WIDTH);
                        fieldApellido.grabFocus(); 
                    }
                }
                else
                {
                    JOptionPane.showMessageDialog(rootPane, "El nombre no puede contener números ni caracteres extraños \n y no puede superar los 15 caracteres","Error en el Nombre", WIDTH);
                    fieldNombre.grabFocus(); 
                }
            }
            else
            {
                JOptionPane.showMessageDialog(rootPane, "El NIF tiene que llevar 8 dígitos","Error en el NIF", WIDTH);
                fieldNif.grabFocus(); 
            }
        }
        else
        {
            JOptionPane.showMessageDialog(rootPane, "El código solo puede contener letras o números","Error en el código", WIDTH);
            fieldCodigo.grabFocus(); 
        }  

    }
    
    
    
    private void comprobarTextFields() {
       if(fieldCodigo.getText().matches("[a-zA-Z0-9]{1,6}"))
        {
            if(fieldNif.getText().matches("[0-9]{8}"))
            {
                 rellenarLetra();
                if(fieldNombre.getText().matches("[a-zA-Z\\s]{1,15}"))
                {
                    if(fieldApellido.getText().matches("[a-zA-Z\\s.-]{1,35}"))
                    {
                        if(fieldDomicilio.getText().matches("[a-zA-Z0-9\\s\\W]{1,40}"))
                        {
                            if(fieldCP.getText().matches("[0-9]{5}")) 
                            {
                                if(fieldLocalidad.getText().matches("[a-zA-Z\\s.-]{1,20}"))
                                {
                                    if(fieldTlfn.getText().matches("[0-9]{9}"))
                                    {
                                        if(fieldMovil.getText().matches("[0-9]{9}"))
                                        {
                                            if(fieldFax.getText().matches("[0-9]{9}"))
                                            {
                                                if(fieldMail.getText().matches("[a-zA-z0-9@_.-]{1,20}"))
                                                {
                                                    JOptionPane.showMessageDialog(rootPane, "El formulario ha sido rellenado correctamente.","Formulario Correcto", WIDTH);
                                                    borrarTodo();
                                                }
                                                else
                                                {
                                                    JOptionPane.showMessageDialog(rootPane, "El email no puede contener acentos ni 'ñ' ni '/' \n y no puede superar los 20 caracteres","Error en el email", WIDTH);
                                                    fieldMail.grabFocus();
                                                }
                                                
                                            }
                                            else
                                            {
                                                JOptionPane.showMessageDialog(rootPane, "El fax debe contener 9 dígitos numéricos","Error en el fax", WIDTH);
                                                fieldFax.grabFocus();
                                            }
                                        }
                                        else
                                        {
                                            JOptionPane.showMessageDialog(rootPane, "El móvil debe contener 9 dígitos numéricos","Error en el móvil", WIDTH);
                                            fieldMovil.grabFocus();
                                        }
                                    }
                                    else
                                    {
                                        JOptionPane.showMessageDialog(rootPane, "El teléfono debe contener 9 dígitos numéricos","Error en el teléfono", WIDTH);
                                        fieldTlfn.grabFocus();
                                    }
                                }
                                else
                                {
                                    JOptionPane.showMessageDialog(rootPane, "La localidad no puede contener números ni '_' \n y no puede superar los 20 caracteres","Error en la localidad", WIDTH);
                                    fieldLocalidad.grabFocus();
                                }
                            }
                            else
                            {
                                JOptionPane.showMessageDialog(rootPane, "El Código postal debe contener 5 números","Error en el Código postal", WIDTH);
                                fieldCP.grabFocus();
                            }
                        }
                        else
                        {
                            JOptionPane.showMessageDialog(rootPane, "El domicilio no puede contener @ ni _ \n y no puede superar los 40 caracteres","Error en el domicilio", WIDTH);
                            fieldDomicilio.grabFocus(); 
                        }
                    }
                    else
                    {
                        JOptionPane.showMessageDialog(rootPane, "El apellido no puede contener números\n y no puede superar los 35 caracteres","Error en el apellido", WIDTH);
                        fieldApellido.grabFocus(); 
                    }
                }
                else
                {
                    JOptionPane.showMessageDialog(rootPane, "El nombre no puede contener números ni caracteres extraños \n y no puede superar los 15 caracteres","Error en el Nombre", WIDTH);
                    fieldNombre.grabFocus(); 
                }
            }
            else
            {
                JOptionPane.showMessageDialog(rootPane, "El NIF tiene que llevar 8 dígitos","Error en el NIF", WIDTH);
                fieldNif.grabFocus(); 
            }
        }
        else
        {
            JOptionPane.showMessageDialog(rootPane, "El código solo puede contener letras o números","Error en el código", WIDTH);
            fieldCodigo.grabFocus(); 
        }  }

    private void habilitar() {
         fieldApellido.setEnabled(true);
        fieldCP.setEnabled(true);
        fieldCodigo.setEnabled(true);
        fieldDomicilio.setEnabled(true);
        fieldMail.setEnabled(true);
        fieldFax.setEnabled(true);
       fieldLetraNif.setEnabled(true);
        fieldLocalidad.setEnabled(true);
        fieldMovil.setEnabled(true);
        fieldNif.setEnabled(true);
        fieldNombre.setEnabled(true);
        fieldTlfn.setEnabled(true);
        fieldtotal.setEnabled(true);
        btnAceptar.setEnabled(true);  
          btnCancelar.setEnabled(true);
           salir.setEnabled(true);
    }

  
    private boolean existeCliente(String text) throws SQLException {
        if (cn.buscarCliente(text)) {
            
        }

        
        return false;
   
    }

    private void rellenarCodigo() throws Exception {
        String dni=fieldCodigo.getText();
        if(fieldCodigo.getText().matches("[a-zA-Z0-9]{1,6}"))
        {
            while(dni.length()!=6)
            {
                dni="0"+dni;
            }
            fieldCodigo.setText(dni);
        }
        else{
            JOptionPane.showMessageDialog(rootPane, "El código tiene que tener como mucho 6 números/letras.", dni, WIDTH);
            throw new Exception("");
        }
    }

    private boolean consultaCodigo() throws SQLException {
        String sentencia = "select Código from clientes;";
        ResultSet listaMovimientos = cn.st.executeQuery(sentencia);
        while (listaMovimientos.next()) {
            String cod = listaMovimientos.getString("Código");
            //JOptionPane.showMessageDialog(null, cod);
            if(cod.equals(fieldCodigo.getText()))
            {
                return false;
            }
        }
        return true;    
    }

    private void enDesarrollo(String nombreMenu, String nombreItem) {
        String t= nombreMenu+"-"+nombreItem;
        JOptionPane.showMessageDialog(rootPane,"En desarrollo", t, WIDTH);
        }

    private void resetFields2() {
                 fieldApellido.setText(null);
		fieldCP.setText(null);
		fieldCodigo.setText(null);
		fieldDomicilio.setText(null);
		fieldFax.setText(null);
		fieldLetraNif.setText(null);
		fieldLocalidad.setText(null);
		fieldMail.setText(null);
		fieldMovil.setText(null);
		fieldNif.setText(null);
		fieldTlfn.setText(null);
		fieldNombre.setText(null);
                fieldCodigo.setEnabled(true);
                fieldApellido.setEnabled(false);
		fieldCP.setEnabled(false);
		fieldDomicilio.setEnabled(false);
		fieldFax.setEnabled(false);
		fieldLetraNif.setEnabled(false);
		fieldLocalidad.setEnabled(false);
		fieldMail.setEnabled(false);
		fieldMovil.setEnabled(false);
		fieldNif.setEnabled(false);
		fieldTlfn.setEnabled(false);
		fieldNombre.setEnabled(false);
                fieldtotal.setEnabled(false);
                btnAceptar.setEnabled(false);
                btnCancelar.setEnabled(false);
    }

    
 }


