/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gestorbd;

import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Frans
 */
public class GestionPedidos extends javax.swing.JFrame {

    static javax.swing.JFrame Principal;

    static ConectorSQL cn;
    
    public boolean cli=false;
    public boolean prov=false;
    
    
    /**
     * Creates new form GestionPedidos
     */
    public GestionPedidos(javax.swing.JFrame padre) {
        
            GestionPedidos.Principal=padre;
            initComponents();
            setLocationRelativeTo(null);

            //setTitle("Gestión de Almacén - Pedidos");
       try {
            cn = new ConectorSQL();
        } catch (ClassNotFoundException ex) {
           System.out.print(ex.getMessage());
        }
       try{
           cn.conectBd();
       }catch (SQLException ex) {
            System.out.print(ex.getMessage());
        }
        
            jTableArticles.setVisible(false);
            //jScrollPane1.setVisible(false);
            jScrollPaneArticulos.setBorder( null );

    }

    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextFieldCod = new javax.swing.JTextField();
        jTextFieldNif = new javax.swing.JTextField();
        jTextFieldNombre = new javax.swing.JTextField();
        jTextFieldApe = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jTextFieldDom = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jTextFieldCp = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jTextFieldLoc = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jTextFieldTotal = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jTextFieldArt = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jTextFieldDesc = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jTextFieldUnid = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jTextFieldStock = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jTextFieldPrecio = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jTextFieldImp = new javax.swing.JTextField();
        jButtonFactura = new javax.swing.JButton();
        jButtonAcept = new javax.swing.JButton();
        jButtonExit = new javax.swing.JButton();
        jButtonCancelPed = new javax.swing.JButton();
        jButtonCancelAll = new javax.swing.JButton();
        jScrollPaneArticulos = new javax.swing.JScrollPane();
        jTableArticles = new javax.swing.JTable();
        jScrollBarArticulos = new javax.swing.JScrollBar();
        jButtonGrid = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenuPedidos = new javax.swing.JMenu();
        jMenuItemClientes = new javax.swing.JMenuItem();
        jMenuItemProve = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItemReturn = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Gestión de Almacén - Pedidos");
        setResizable(false);

        jLabel1.setText("Código");

        jLabel2.setText("N.I.F.");

        jLabel3.setText("Nombre");

        jTextFieldCod.setEnabled(false);
        jTextFieldCod.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldCodKeyReleased(evt);
            }
        });

        jTextFieldNif.setEnabled(false);

        jTextFieldNombre.setEnabled(false);

        jTextFieldApe.setEnabled(false);

        jLabel4.setText("Apellidos");

        jLabel5.setText("Domicilio");

        jTextFieldDom.setEnabled(false);

        jLabel6.setText("Código Postal");

        jTextFieldCp.setEnabled(false);

        jLabel7.setText("Localidad");

        jTextFieldLoc.setEnabled(false);

        jLabel8.setText("Total");

        jTextFieldTotal.setEnabled(false);

        jLabel9.setText("--------------------------------------------------------------------------------------------------------------");

        jLabel10.setText("Artículo");

        jTextFieldArt.setEnabled(false);
        jTextFieldArt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldArtKeyReleased(evt);
            }
        });

        jLabel11.setText("Descripción");

        jTextFieldDesc.setEnabled(false);

        jLabel12.setText("Unidades");

        jTextFieldUnid.setEnabled(false);
        jTextFieldUnid.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextFieldUnidKeyReleased(evt);
            }
        });

        jLabel13.setText("Stock");

        jTextFieldStock.setEnabled(false);

        jLabel14.setText("Precio");

        jTextFieldPrecio.setEnabled(false);

        jLabel15.setText("Importe");

        jTextFieldImp.setEnabled(false);

        jButtonFactura.setMnemonic('f');
        jButtonFactura.setText("Factura");
        jButtonFactura.setEnabled(false);
        jButtonFactura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFacturaActionPerformed(evt);
            }
        });

        jButtonAcept.setMnemonic('a');
        jButtonAcept.setText("Aceptar");
        jButtonAcept.setEnabled(false);
        jButtonAcept.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAceptActionPerformed(evt);
            }
        });

        jButtonExit.setMnemonic('s');
        jButtonExit.setText("Salir");
        jButtonExit.setEnabled(false);
        jButtonExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExitActionPerformed(evt);
            }
        });

        jButtonCancelPed.setMnemonic('p');
        jButtonCancelPed.setText("Cancelar Pedido");
        jButtonCancelPed.setEnabled(false);
        jButtonCancelPed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelPedActionPerformed(evt);
            }
        });

        jButtonCancelAll.setMnemonic('c');
        jButtonCancelAll.setText("Cancelar Todo");
        jButtonCancelAll.setEnabled(false);
        jButtonCancelAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelAllActionPerformed(evt);
            }
        });

        jScrollPaneArticulos.setHorizontalScrollBar(jScrollBarArticulos);
        jScrollPaneArticulos.setVerticalScrollBar(jScrollBarArticulos);

        jTableArticles.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTableArticles.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableArticlesMouseClicked(evt);
            }
        });
        jScrollPaneArticulos.setViewportView(jTableArticles);

        jButtonGrid.setText("...");
        jButtonGrid.setEnabled(false);
        jButtonGrid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGridActionPerformed(evt);
            }
        });

        jMenuPedidos.setMnemonic('p');
        jMenuPedidos.setText("Pedidos");

        jMenuItemClientes.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemClientes.setMnemonic('c');
        jMenuItemClientes.setText("Clientes");
        jMenuItemClientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemClientesActionPerformed(evt);
            }
        });
        jMenuPedidos.add(jMenuItemClientes);

        jMenuItemProve.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemProve.setMnemonic('p');
        jMenuItemProve.setText("Proveedores");
        jMenuItemProve.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemProveActionPerformed(evt);
            }
        });
        jMenuPedidos.add(jMenuItemProve);
        jMenuPedidos.add(jSeparator1);

        jMenuItemReturn.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItemReturn.setMnemonic('v');
        jMenuItemReturn.setText("Volver");
        jMenuItemReturn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemReturnActionPerformed(evt);
            }
        });
        jMenuPedidos.add(jMenuItemReturn);

        jMenuBar1.add(jMenuPedidos);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(244, 244, 244)
                        .addComponent(jButtonFactura, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonAcept, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel15)
                                    .addComponent(jTextFieldImp, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jButtonExit, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextFieldArt, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonGrid, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel11)
                                    .addComponent(jTextFieldDesc, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jTextFieldApe, javax.swing.GroupLayout.PREFERRED_SIZE, 444, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel1)
                                        .addComponent(jTextFieldCod, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(26, 26, 26)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jTextFieldNif, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel2))
                                    .addGap(26, 26, 26)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jTextFieldNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel3)))
                                .addComponent(jLabel4)
                                .addComponent(jLabel5)
                                .addComponent(jTextFieldDom, javax.swing.GroupLayout.PREFERRED_SIZE, 514, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel6)
                                        .addComponent(jTextFieldCp, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(32, 32, 32)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel7)
                                        .addComponent(jTextFieldLoc, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel8)
                                        .addComponent(jTextFieldTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(46, 46, 46))))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jScrollPaneArticulos, javax.swing.GroupLayout.PREFERRED_SIZE, 532, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel12)
                                            .addComponent(jTextFieldUnid, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(28, 28, 28)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel13)
                                                .addGap(89, 89, 89)
                                                .addComponent(jLabel14))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jTextFieldStock, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(jTextFieldPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(jButtonCancelPed)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonCancelAll, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollBarArticulos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldCod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldNif, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldApe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldDom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel6)
                        .addComponent(jLabel8)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldCp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldLoc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(jLabel11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldArt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldDesc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonGrid))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(jLabel13)
                    .addComponent(jLabel14)
                    .addComponent(jLabel15))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldUnid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldStock, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldImp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonFactura)
                    .addComponent(jButtonAcept)
                    .addComponent(jButtonExit))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonCancelPed)
                    .addComponent(jButtonCancelAll))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollBarArticulos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPaneArticulos, javax.swing.GroupLayout.DEFAULT_SIZE, 118, Short.MAX_VALUE))
                .addContainerGap(37, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonGridActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGridActionPerformed
         try {
            rellenarTabla(cn.listadoArticulos(cli, prov));
        } catch (SQLException ex) {
            Logger.getLogger(GestionPedidos.class.getName()).log(Level.SEVERE, null, ex);
        }
        jTableArticles.setVisible(true);
        
        jButtonGrid.setEnabled(false);
        jTextFieldArt.grabFocus();
    }//GEN-LAST:event_jButtonGridActionPerformed

    private void jMenuItemClientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemClientesActionPerformed
        // Change title
        this.setTitle("Pedidos-Cliente");
        // Change button's name "Factura"
        jButtonFactura.setText("Factura");
        // Boolean cli=true and prov=false
        cli=true;
        prov=false;
        // Enable and focus "Codigo"
        jTextFieldCod.setEnabled(true);
        jTextFieldCod.grabFocus();
        // Enable button "Exit"
        jButtonExit.setEnabled(true);
        // Disable menu
        jMenuPedidos.setEnabled(false);
    }//GEN-LAST:event_jMenuItemClientesActionPerformed

    private void jMenuItemProveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemProveActionPerformed
       // Change title
       this.setTitle("Pedidos-Proveedor");
       // Change button's name "Factura"
       jButtonFactura.setText("Finalizar");
       // Boolean cli=false and prov=true
       cli=false;
       prov=true;
       // Enable and focus "Codigo"
       jTextFieldCod.setEnabled(true);
       jTextFieldCod.grabFocus();
       // Enable button "Exit"
       jButtonExit.setEnabled(true);
       // Disable menu
       jMenuPedidos.setEnabled(false);
    }//GEN-LAST:event_jMenuItemProveActionPerformed

    private void jMenuItemReturnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemReturnActionPerformed
        Principal.setEnabled(true);
        dispose();       
    }//GEN-LAST:event_jMenuItemReturnActionPerformed

    private void jButtonExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExitActionPerformed
       if(jButtonFactura.isEnabled()){
           if(JOptionPane.showConfirmDialog(null, "Existen operaciones pendientes,"
                   + " si cancela ahora las operaciones no facturadas se perderán.\n"
               + "¿Desea continuar?", "AVISO", JOptionPane.YES_NO_OPTION)==JOptionPane.YES_OPTION) {
               try {
                   cn.rollback();
               } catch (SQLException ex) {
                    System.out.print(ex.getMessage());
               }
           }else{
               return;
           }
       }
       cli=false;
       prov=false;
       
       // Reset Form
       resetForm(); 
    }//GEN-LAST:event_jButtonExitActionPerformed

    private void jTextFieldCodKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldCodKeyReleased
        // If push "ENTER"
        if (evt.getKeyCode()==KeyEvent.VK_ENTER) {
           
                if(!rellenarCodigo()){
                    String message="El código debe tener un máximo de 6 caracteres\n y debe tener valor distinto de 0.";
                errorMessage(jTextFieldCod, message);
                jTextFieldCod.setText("");
                return;
                } else{
                    try {
                        if (existeComprador(cli, prov)) {
                           cargarComprador(cli,prov);
                           jTextFieldCod.setEnabled(false);
                           jTextFieldArt.setEnabled(true);

                           jTextFieldArt.grabFocus();
                        } else {
                            if (cli) {
                                errorMessage(jTextFieldCod, "Ese código no pertenece a ningún cliente");
                                jTextFieldCod.setText("");
                            } else {
                                errorMessage(jTextFieldCod, "Ese código no pertenece a ningún proveedor");
                                jTextFieldCod.setText("");
                            }
                        }
                    } catch (SQLException ex) {
                    Logger.getLogger(GestionPedidos.class.getName()).log(Level.SEVERE, null, ex);
                }
                }
     }
    }//GEN-LAST:event_jTextFieldCodKeyReleased

    private void jTextFieldArtKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldArtKeyReleased
       if (evt.getKeyCode()==KeyEvent.VK_ENTER) {
            enterArticle();
        }
    }//GEN-LAST:event_jTextFieldArtKeyReleased

    private void jButtonCancelPedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelPedActionPerformed
        resetOrder();
    }//GEN-LAST:event_jButtonCancelPedActionPerformed

    private void jButtonCancelAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelAllActionPerformed
        if (jButtonFactura.isEnabled()) {
            if (JOptionPane.showConfirmDialog(null, "Existen operaciones pendientes, si cancela ahora las operaciones no facturadas se perderán.\n"
                    + "¿Desea continuar?", "AVISO", JOptionPane.YES_NO_OPTION)==JOptionPane.NO_OPTION) {
                return;
            }
        }
        resetForm();
        jMenuPedidos.setEnabled(false);
        jButtonExit.setEnabled(true);
        jTextFieldCod.setEnabled(true);
        jTextFieldCod.grabFocus();
        try {
            cn.rollback();
        } catch (SQLException ex) {
            Logger.getLogger(GestionPedidos.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonCancelAllActionPerformed

    private void jTextFieldUnidKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldUnidKeyReleased
        if (evt.getKeyCode()==KeyEvent.VK_ENTER) {
            if (cli) {
                int unidades=0;
                try {
                    unidades = Integer.valueOf(jTextFieldUnid.getText());
                } catch (NumberFormatException e ){
                    String mensaje="Las unidades solo pueden ser números enteros";
                    errorMessage(jTextFieldUnid, mensaje);
                    return;
                }
                if (unidades > getStock() || unidades < 1) {
                    String mensaje="Las unidades no pueden ser mayores que el stock ni un número menor de 1.";
                    errorMessage(jTextFieldUnid, mensaje);
                    return;
                }
            }
            calcularImporte();
            jTextFieldUnid.setEnabled(false);
            jTableArticles.setVisible(false);
            jTableArticles.setModel(new DefaultTableModel());
            jTableArticles.setVisible(false);
            jButtonAcept.setEnabled(true);
            jButtonAcept.grabFocus();
        }
    }//GEN-LAST:event_jTextFieldUnidKeyReleased

    private void jButtonAceptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAceptActionPerformed
        checkout();
    }//GEN-LAST:event_jButtonAceptActionPerformed

    private void jButtonFacturaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFacturaActionPerformed
        cli=false;
        prov=false;
       
        resetForm();
        try {
            cn.commit();
        } catch (SQLException ex) {
            Logger.getLogger(GestionPedidos.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonFacturaActionPerformed

    private void jTableArticlesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableArticlesMouseClicked
         DefaultTableModel model = (DefaultTableModel) jTableArticles.getModel();
        int selectedIndex = jTableArticles.getSelectedRow();
        
        jTextFieldArt.setText(model.getValueAt(selectedIndex, 0).toString());
        jTextFieldDesc.setText(model.getValueAt(selectedIndex, 1).toString());
        jTextFieldStock.setText(model.getValueAt(selectedIndex, 2).toString());
        jTextFieldPrecio.setText(model.getValueAt(selectedIndex, 3).toString());

        jTextFieldArt.setEnabled(false);
       
        jButtonGrid.setEnabled(false);
        jTextFieldUnid.setEnabled(true);
        jTextFieldUnid.grabFocus();
        jButtonCancelPed.setEnabled(true);
        jTableArticles.setVisible(false);
        jTableArticles.setVisible(false);
        jTableArticles.setModel(new DefaultTableModel());
    }//GEN-LAST:event_jTableArticlesMouseClicked

    private void cargarComprador(boolean cli, boolean prov) throws SQLException {
        String tabla="";
        String codigo="";
        if (cli) {
            tabla="Clientes";
            codigo="Código";
        }
        if (prov){
            tabla="Proveedores";
            codigo="Codigo";
        }
        
        String sql="SELECT * FROM "+tabla+" WHERE "+codigo+"='"+jTextFieldCod.getText()+"'";
        try {
            ResultSet rs=cn.select(sql);
            while (rs.next()) {
                jTextFieldNif.setText(rs.getString("Nif"));
                jTextFieldNombre.setText(rs.getString("Nombre"));
                jTextFieldApe.setText(rs.getString("Apellidos"));
                jTextFieldDom.setText(rs.getString("Domicilio"));
                jTextFieldCp.setText(rs.getString("Código_Postal"));
                jTextFieldLoc.setText(rs.getString("Localidad"));
                jTextFieldTotal.setText(String.valueOf(rs.getFloat("Total_Ventas")));
            }
            jButtonCancelAll.setEnabled(true);
            jButtonGrid.setEnabled(true);
            rs.close();
        } catch (SQLException ex) {
            System.out.println(ex.getMessage());
        }
    }
    
    // Calculate Amount
    private void calcularImporte() {
        Double cant = Double.valueOf(jTextFieldUnid.getText());
        Double precio = Double.valueOf(jTextFieldPrecio.getText());
        
        Double importe = precio * cant;
        jTextFieldImp.setText(String.valueOf(importe));
    }
    
    // Get Stock
    private int getStock() {
        int result=0;
        String sql="SELECT * FROM Articulos WHERE Codigo='"+jTextFieldArt.getText()+"'";
        try {
            ResultSet rs=cn.select(sql);
            while (rs.next()) {
                result = rs.getInt("Stock");
            }
            jButtonCancelPed.setEnabled(true);
            rs.close();
        } catch (SQLException ex) {
            System.out.println(ex.getMessage());
        }
        return result;
    }
    
    // Fill code
    private boolean rellenarCodigo() {
        String code=jTextFieldCod.getText();
        if(jTextFieldCod.getText().matches("[a-zA-Z0-9]{1,6}")){
            while(code.length()!=6)
            {
                code="0"+code;
            }
            jTextFieldCod.setText(code);
            return true;
        }else{
            return false;
            
        }
    }
    
    // Reset form
    private void resetForm() {
        if (cli) {
            this.setTitle("Pedidos-Cliente");
            jButtonFactura.setText("Factura");
        } else if (prov) {
            this.setTitle("Pedidos-Proveedor");
            jButtonFactura.setText("Finalizar");
        } else {
            this.setTitle("Pedidos");
            jButtonFactura.setText("Factura");
        }
        
        jTextFieldArt.setEnabled(false);
        
        jTextFieldUnid.setEnabled(false);
        jTextFieldCod.setEnabled(false);
        
        jTextFieldCod.setText("");
        jTextFieldNif.setText("");
        jTextFieldNombre.setText("");
        jTextFieldApe.setText("");
        jTextFieldDom.setText("");
        jTextFieldCp.setText("");
        jTextFieldLoc.setText("");
        jTextFieldTotal.setText("");
        
        jTextFieldArt.setText("");
        jTextFieldDesc.setText("");
        jTextFieldUnid.setText("");
        jTextFieldStock.setText("");
        jTextFieldPrecio.setText("");
        jTextFieldImp.setText("");
        
        
        //jScrollPane1.setVisible(false);
        jTableArticles.setVisible(false);
        jTableArticles.setModel(new DefaultTableModel());
        
        jButtonGrid.setEnabled(false);
        jButtonExit.setEnabled(false);
        jButtonCancelPed.setEnabled(false);
        jButtonAcept.setEnabled(false);
        jButtonCancelAll.setEnabled(false);
        jButtonFactura.setEnabled(false);
        jMenuPedidos.setEnabled(true);
        jMenuPedidos.grabFocus();
    
    }
    
    // Build the Error message
    public void errorMessage(JTextField box,String message) {
        JOptionPane.showMessageDialog(null,message,"Error al escribir los datos.",JOptionPane.ERROR_MESSAGE);
        box.setText("");
        box.grabFocus();
    }

    // Check the existence of the buyer
    private boolean existeComprador(boolean cli, boolean prov) throws SQLException {
            boolean exist=false;
            String tabla="";
            String codigo="";
            if (cli) {
                tabla="Clientes";
                codigo="Código";
            }
            if (prov){
                tabla="Proveedores";
                codigo="Codigo";
            }

            String sql="SELECT * FROM "+tabla+" WHERE "+codigo+"='"+jTextFieldCod.getText()+"'";
            try {
                ResultSet rs=cn.select(sql);
                while (rs.next()) {
                    exist=true;
                }
                rs.close();
            } catch (SQLException ex) {
                System.out.println(ex.getMessage());
            }
            return exist;
        }
    
    // Enter Article
    private void enterArticle(){
            String cod=jTextFieldArt.getText();
            jTextFieldArt.setText(completarCodigo(cod));
            if (!validarTexto(jTextFieldArt.getText(),"([A-Z]*[a-z]*[0-9]*)*", 6) || !comprobarCodigo(jTextFieldArt.getText())) {
                String mensaje="El código debe tener un máximo de 6 caracteres \n y debe tener valor distinto de 0.";
                errorMessage(jTextFieldArt, mensaje);
                jTextFieldArt.setText("");
                return;
            } else {
                try {
                    if (existArticle()) {
                       loadItem(cli,prov);
                       jTextFieldArt.setEnabled(false);
                       
                       jButtonGrid.setEnabled(false);
                       jTextFieldUnid.setEnabled(true);
                       jTextFieldUnid.grabFocus();
                    } else {
                            errorMessage(jTextFieldArt, "Ese código no pertenece a ningún artículo");
                            jTextFieldArt.setText("");
                            jButtonGrid.setEnabled(true);
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(GestionPedidos.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            jTableArticles.setVisible(false);
            jTableArticles.setModel(new DefaultTableModel());
    }
    
    // If there is an Article
    private boolean existArticle() throws SQLException {
        boolean existe=false;
        
        String sql="SELECT * FROM Articulos WHERE Codigo='"+jTextFieldArt.getText()+"'";
        try {
            ResultSet rs=cn.select(sql);
            while (rs.next()) {
                existe=true;
            }
            rs.close();
        } catch (SQLException ex) {
            System.out.println(ex.getMessage());
        }
        return existe;
    }
    
    // Load an Item
    private void loadItem(boolean cli, boolean prov) throws SQLException {
        
        String sql="SELECT * FROM Articulos WHERE Codigo='"+jTextFieldArt.getText()+"'";
        try {
            ResultSet rs=cn.select(sql);
            while (rs.next()) {
                jTextFieldDesc.setText(rs.getString("Descripcion"));
                jTextFieldStock.setText(rs.getString("Stock"));
                if (cli) {
                    jTextFieldPrecio.setText(String.valueOf(rs.getDouble("Precio_de_venta")));
                } else if (prov) {
                    jTextFieldPrecio.setText(String.valueOf(rs.getDouble("Precio_de_compra")));
                }
            }
            jButtonCancelAll.setEnabled(true);
            rs.close();
        } catch (SQLException ex) {
            System.out.println(ex.getMessage());
        }
    }
    
    public static boolean comprobarCodigo(String t){
        if(t.length()<=6 && t.length()>=1 && !t.matches("0")){            
            String patron="[A-Za-z0-9]*";
            if(t.matches(patron)){
                return true;
            }
        }  
        return false;
    }
    
    static String completarCodigo(String cod) {
        String result=cod;
        if (cod.length()!=6) {
            int n=6-cod.length();
            for (int i = 0; i < n; i++) {
                result="0"+result;
            }
        }
        return result;
        
    }
    
    static boolean validarTexto(String texto, String patron, int longitud) {
        return Pattern.matches(patron,texto) & texto.length()<=longitud & texto.length()!=0;
    }
    
    // Reset Order
    private void resetOrder() {
        jTextFieldArt.setEnabled(true);
        
        jTextFieldUnid.setEnabled(false);
        jTextFieldArt.setText("");
        jTextFieldDesc.setText("");
        jTextFieldUnid.setText("");
        jTextFieldStock.setText("");
        jTextFieldPrecio.setText("");
        jTextFieldImp.setText("");
        
        
        jTableArticles.setVisible(false);
        jTableArticles.setModel(new DefaultTableModel());
        
        jButtonGrid.setEnabled(true);
        
        jTextFieldArt.grabFocus();
        
        jButtonAcept.setEnabled(false);
        jButtonCancelPed.setEnabled(false);
    }
    
    // CheckOut
    private void checkout() {
        updateStockTable(Integer.valueOf(jTextFieldUnid.getText()));
        updateTotal();
        grabarRegistro();
        restartOrder();
        jButtonFactura.setEnabled(true);
    }
    
    private void updateStockTable(int cant) {
        int result=0;
        if (prov) {
            result=getStock()+cant;
        } else {
            result = getStock()-cant;
        }
        String sql="UPDATE Articulos SET Stock='"+result+"' WHERE Codigo='"+jTextFieldArt.getText()+"'";
        try {
            cn.executeUpdate(sql);
            rellenarTabla(cn.listadoArticulos(cli, prov));
        } catch (SQLException ex) {
            Logger.getLogger(GestionPedidos.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void rellenarTabla(ArrayList<Article> al) {
        
		DefaultTableModel tableModel = new DefaultTableModel();

		String[] columnNames = {"Código", "Descripción","Stock","Precio"};
		tableModel.setColumnIdentifiers(columnNames);
		Object[] fila = new Object[tableModel.getColumnCount()];

		for (int i = 0; i < al.size(); i++) {
                    Article p = al.get(i);
                    fila[0] = p.getCodigo();
                    fila[1] = p.getDescripcion();
                    fila[2] = p.getStock();
                    fila[3] = p.getPrecio();
                    tableModel.addRow(fila);
		}

		jTableArticles.setModel(tableModel);
	}
    
    private void updateTotal() {
        Float totalTabla=getTotal();
        Float importe = Float.valueOf(jTextFieldImp.getText());
        Float nuevoTotal = totalTabla+importe;
        
        
        String tabla="";
        String codigo="";
        if (cli) {
            tabla="Clientes";
            codigo="Código";
        }
        if (prov){
            tabla="Proveedores";
            codigo="Codigo";
        }
        
        String sql="UPDATE "+tabla+" SET Total_Ventas="+nuevoTotal+" WHERE "+codigo+"='"+jTextFieldCod.getText()+"'";
        try {
            cn.executeUpdate(sql);
        } catch (SQLException ex) {
            System.out.println(ex.getMessage());
        }
        
        jTextFieldTotal.setText(String.valueOf(getTotal()));
        
    }
    
    private float getTotal() {
        float result=0;
        String tabla="";
        String codigo="";
        if (cli) {
            tabla="Clientes";
            codigo="Código";
        }
        if (prov){
            tabla="Proveedores";
            codigo="Codigo";
        }
        
        String sql="SELECT * FROM "+tabla+" WHERE "+codigo+"='"+jTextFieldCod.getText()+"'";
        try {
            ResultSet rs=cn.select(sql);
            while (rs.next()) {
                result=rs.getFloat("Total_Ventas");
            }
            rs.close();
        } catch (SQLException ex) {
            System.out.println(ex.getMessage());
        }
        return result;
    }
    
    private void grabarRegistro() {
        String sql="";
        //Date fechaActual= new Date(System.currentTimeMillis());
        if (cli) {
            sql="INSERT INTO Historica VALUES (null,"+jTextFieldCod.getText()+",null,"+jTextFieldArt.getText()+","
                    +jTextFieldUnid.getText()+",CURRENT_TIMESTAMP())";
        } else {
            sql="INSERT INTO Historica VALUES (null,null,"+jTextFieldCod.getText()+","+jTextFieldArt.getText()+","
                    +jTextFieldUnid.getText()+",CURRENT_TIMESTAMP())";
        }
        try {
            cn.executeUpdate(sql);
        } catch (SQLException ex) {
            Logger.getLogger(GestionPedidos.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    // Reset Order
    private void restartOrder() {
        jTextFieldArt.setEnabled(true);
        
        jTextFieldUnid.setEnabled(false);
        jTextFieldArt.setText("");
        jTextFieldDesc.setText("");
        jTextFieldUnid.setText("");
        jTextFieldStock.setText("");
        jTextFieldPrecio.setText("");
        jTextFieldImp.setText("");
        
        
        jTableArticles.setVisible(false);
        jTableArticles.setModel(new DefaultTableModel());
        
        jButtonGrid.setEnabled(true);
        
        jTextFieldArt.grabFocus();
        
        jButtonAcept.setEnabled(false);
        jButtonCancelPed.setEnabled(false);
    }
    
    protected void processWindowEvent(java.awt.event.WindowEvent e) {
        super.processWindowEvent(e);
        if (e.getID() == java.awt.event.WindowEvent.WINDOW_CLOSING) {
            Principal.setEnabled(true);
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAcept;
    private javax.swing.JButton jButtonCancelAll;
    private javax.swing.JButton jButtonCancelPed;
    private javax.swing.JButton jButtonExit;
    private javax.swing.JButton jButtonFactura;
    private javax.swing.JButton jButtonGrid;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItemClientes;
    private javax.swing.JMenuItem jMenuItemProve;
    private javax.swing.JMenuItem jMenuItemReturn;
    private javax.swing.JMenu jMenuPedidos;
    private javax.swing.JScrollBar jScrollBarArticulos;
    private javax.swing.JScrollPane jScrollPaneArticulos;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JTable jTableArticles;
    private javax.swing.JTextField jTextFieldApe;
    private javax.swing.JTextField jTextFieldArt;
    private javax.swing.JTextField jTextFieldCod;
    private javax.swing.JTextField jTextFieldCp;
    private javax.swing.JTextField jTextFieldDesc;
    private javax.swing.JTextField jTextFieldDom;
    private javax.swing.JTextField jTextFieldImp;
    private javax.swing.JTextField jTextFieldLoc;
    private javax.swing.JTextField jTextFieldNif;
    private javax.swing.JTextField jTextFieldNombre;
    private javax.swing.JTextField jTextFieldPrecio;
    private javax.swing.JTextField jTextFieldStock;
    private javax.swing.JTextField jTextFieldTotal;
    private javax.swing.JTextField jTextFieldUnid;
    // End of variables declaration//GEN-END:variables

    

    
}
